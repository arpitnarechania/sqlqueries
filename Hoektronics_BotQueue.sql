SELECT max(id) FROM s3_files
UPDATE jobs set user_sort=0  WHERE status IN (complete,failure,canceled)
CREATE TABLE IF NOT EXISTS `patches` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `patch_num` int(11) unsigned NOT NULL, `description` text NOT NULL, PRIMARY KEY (`id`), KEY `patch_num` (`patch_num`))
UPDATE jobs SET user_sort=user_sort+1 WHERE user_id = ?
SELECT id FROM jobs WHERE bot_id = ? 
SELECT id FROM job_clock WHERE bot_id = ? 
SELECT count(id) FROM jobs WHERE status = 'available' AND user_id = ?
SELECT * from jobs
CREATE TABLE IF NOT EXISTS `users` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `username` varchar(32) NOT NULL, `email` varchar(255) NOT NULL, `pass_hash` varchar(40) NOT NULL, `pass_reset_hash` char(40) NOT NULL, `location` varchar(255) NOT NULL, `birthday` date NOT NULL, `last_active` datetime NOT NULL, `registered_on` datetime NOT NULL, `last_notification` int(11) NOT NULL DEFAULT 0, `dashboard_style` enum('list','large_thumbnails','medium_thumbnails','small_thumbnails') NOT NULL DEFAULT 'large_thumbnails', `thingiverse_token` varchar(40) NOT NULL DEFAULT '', `is_admin` tinyint(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`), KEY `last_active` (`last_active`), KEY `username` (`username`), KEY `pass_hash` (`pass_hash`), KEY `email` (`email`))
CREATE TABLE IF NOT EXISTS `email_queue` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `subject` varchar(255) NOT NULL, `text_body` text NOT NULL, `html_body` text NOT NULL, `to_email` varchar(255) NOT NULL, `to_name` varchar(255) NOT NULL, `queue_date` datetime NOT NULL, `sent_date` datetime NOT NULL, `status` enum('queued','sent') NOT NULL DEFAULT 'queued', PRIMARY KEY `id` (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `status` (`status`))
INSERT INTO bot_queues VALUES(?, ?, 1)
SELECT * FROM patches WHERE patch_num >= ?
CREATE TABLE IF NOT EXISTS `oauth_consumer` ( `id` int(11) NOT NULL AUTO_INCREMENT, `consumer_key` varchar(255) NOT NULL, `consumer_secret` varchar(255) NOT NULL, `active` tinyint(1) NOT NULL, `name` varchar(255) DEFAULT '', `user_id` int(11) unsigned NOT NULL, `app_url` varchar(255) NOT NULL DEFAULT '', PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
CREATE TABLE IF NOT EXISTS `slice_engines` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `engine_name` varchar(255) NOT NULL, `engine_path` varchar(255) NOT NULL, `is_featured` tinyint(1) NOT NULL, `is_public` tinyint(1) NOT NULL, `add_date` datetime NOT NULL, `default_config_id` int(11) unsigned NOT NULL, PRIMARY KEY (`id`), KEY `engine_name` (`engine_name`), KEY `is_featured` (`is_featured`), KEY `is_public` (`is_public`))
CREATE TABLE IF NOT EXISTS `bot_queues` ( `queue_id` int(11) unsigned NOT NULL, `bot_id` int(11) unsigned NOT NULL, `priority` int(11) unsigned NOT NULL, PRIMARY KEY (`queue_id`, `bot_id`, `priority`))
SELECT * FROM news ORDER BY newsdate DESC
CREATE TABLE IF NOT EXISTS `webcam_images` (			 `timestamp` datetime NOT NULL,			 `image_id` bigint(11) unsigned NOT NULL,			 `user_id` int(11) unsigned NOT NULL,			 `bot_id` int(11) unsigned NULL,			 `job_id` int(11) unsigned NULL,			 PRIMARY KEY (`timestamp`, `image_id`),			 FOREIGN KEY (`image_id`) REFERENCES s3_files(`id`) ON DELETE CASCADE,			 FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE,			 FOREIGN KEY (`bot_id`) REFERENCES bots(`id`) ON DELETE CASCADE,			 FOREIGN KEY (`job_id`) REFERENCES jobs(`id`) ON DELETE CASCADE			)
CREATE TABLE IF NOT EXISTS `bot_queues` (		 `queue_id` INT(11) UNSIGNED NOT NULL,		 `bot_id` INT(11) UNSIGNED NOT NULL,		 `priority` INT(11) UNSIGNED NOT NULL,		 PRIMARY KEY (`queue_id`, `bot_id`, `priority`)			)
CREATE TABLE `engine_os` (		`engine_id` INT(11) UNSIGNED NOT NULL,		`os` ENUM('osx','linux','win','raspberrypi'),		PRIMARY KEY (`engine_id`, `os`)		)
SELECT id FROM queues ORDER BY id LIMIT 1
CREATE TABLE IF NOT EXISTS `webcam_images` ( `timestamp` datetime NOT NULL, `image_id` bigint(11) unsigned NOT NULL, `user_id` int(11) unsigned NOT NULL, `bot_id` int(11) unsigned NULL, `job_id` int(11) unsigned NULL, PRIMARY KEY (`timestamp`, `image_id`), FOREIGN KEY (`image_id`) REFERENCES s3_files(`id`) ON DELETE CASCADE, FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, FOREIGN KEY (`bot_id`) REFERENCES bots(`id`) ON DELETE CASCADE, FOREIGN KEY (`job_id`) REFERENCES jobs(`id`) ON DELETE CASCADE)
SELECT image_id from webcam_images
CREATE TABLE IF NOT EXISTS `activities` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `activity` text NOT NULL, `action_date` datetime NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
SELECT id FROM notifications WHERE id > ? AND (to_user_id = ? or to_user_id IS NULL)
CREATE TABLE IF NOT EXISTS `slice_jobs` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `job_id` int(11) unsigned NOT NULL, `input_id` int(11) unsigned NOT NULL, `output_id` int(11) unsigned NOT NULL, `output_log` text NOT NULL, `error_log` text, `slice_config_id` int(11) unsigned NOT NULL, `slice_config_snapshot` text NOT NULL, `status` enum('available','slicing','pending','complete','failure','expired') DEFAULT 'available', `progress` float NOT NULL DEFAULT '0', `add_date` datetime NOT NULL, `taken_date` datetime NOT NULL, `finish_date` datetime NOT NULL, `uid` char(40) NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `job_id` (`job_id`), KEY `slice_config_id` (`slice_config_id`))
SELECT id FROM users) AND user_id IS NOT NULL";
UPDATE oauth_token SET type2=request  WHERE type=1
SELECT id FROM jobs WHERE queue_id = ? 
CREATE TABLE IF NOT EXISTS `notifications` (			 `id` int(11) unsigned NOT NULL AUTO_INCREMENT,			 `timestamp` datetime NOT NULL,			 `from_user_id` int(11) unsigned NULL,			 `to_user_id` int(11) unsigned NULL,			 `title` varchar(255) NOT NULL,			 `content` text NOT NULL,			 PRIMARY KEY (`id`),			 FOREIGN KEY (`from_user_id`) REFERENCES users(`id`) ON DELETE CASCADE,			 FOREIGN KEY (`to_user_id`) REFERENCES users(`id`) ON DELETE CASCADE			)
CREATE TABLE IF NOT EXISTS `patches` ( `id` INT(11) UNSIGNED NOT NULL AUTO_INCREMENT, `patch_num` INT(11) UNSIGNED NOT NULL, `description` TEXT NOT NULL, PRIMARY KEY (`id`), KEY `patch_num` (`patch_num`) )
CREATE TABLE IF NOT EXISTS `comments` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `content_id` int(11) NOT NULL, `content_type` varchar(255) NOT NULL, `comment` text NOT NULL, `comment_date` datetime NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `content_id` (`content_id`), KEY `content_type` (`content_type`))
SELECT count(*) FROM ({$this->query}) AS subq
UPDATE oauth_token SET type2=access  WHERE type=2
CREATE TABLE IF NOT EXISTS `job_clock` ( `id` int(11) NOT NULL AUTO_INCREMENT, `job_id` int(11) NOT NULL, `bot_id` int(11) NOT NULL, `queue_id` int(11) NOT NULL, `user_id` int(11) unsigned NOT NULL, `status` enum('working','waiting', 'complete', 'dropped'), `created_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', `taken_time` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', `start_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', `end_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00', PRIMARY KEY (`id`), KEY `job_id` (`job_id`), KEY `bot_id` (`bot_id`), KEY `queue_id` (`queue_id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
CREATE TABLE IF NOT EXISTS `notifications` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `timestamp` datetime NOT NULL, `from_user_id` int(11) unsigned NULL, `to_user_id` int(11) unsigned NULL, `title` varchar(255) NOT NULL, `content` text NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`from_user_id`) REFERENCES users(`id`) ON DELETE CASCADE, FOREIGN KEY (`to_user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
SELECT count(id) FROM s3_files WHERE add_date='0000-00-00 00:00:00'
SELECT id, webcam_image_id FROM jobs WHERE webcam_image_id != 0 AND status = 'complete' ORDER BY finished_time DESC
CREATE TABLE `slice_engines` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `engine_name` varchar(255) NOT NULL, `engine_path` varchar(255) NOT NULL, `engine_description` text NOT NULL, `is_featured` tinyint(1) NOT NULL, `is_public` tinyint(1) NOT NULL, `add_date` datetime NOT NULL, `default_config_id` int(11) unsigned NOT NULL, PRIMARY KEY (`id`), KEY `engine_name` (`engine_name`), KEY `is_featured` (`is_featured`), KEY `is_public` (`is_public`))
SELECT * FROM jobs
CREATE TABLE IF NOT EXISTS `shortcodes` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `url` varchar(255) NOT NULL, PRIMARY KEY (`id`), KEY `url` (`url`))
SELECT id, queue_id from bots
CREATE TABLE `slice_jobs` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `job_id` int(11) unsigned NOT NULL, `input_id` int(11) unsigned NOT NULL, `output_id` int(11) unsigned NOT NULL, `output_log` text NOT NULL, `slice_config_id` int(11) unsigned NOT NULL, `slice_config_snapshot` text NOT NULL, `worker_token` char(40) NOT NULL, `worker_name` varchar(255) NOT NULL, `status` enum('available', 'slicing', 'complete', 'failure'), `progress` float NOT NULL DEFAULT '0', `add_date` datetime NOT NULL, `taken_date` datetime NOT NULL, `finish_date` datetime NOT NULL, PRIMARY KEY (`id`), KEY `user_id` (`user_id`), KEY `job_id` (`job_id`), KEY `slice_config_id` (`slice_config_id`))
SELECT * from bots
CREATE TABLE IF NOT EXISTS `error_log` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `job_id` int(11) unsigned NOT NULL, `bot_id` int(11) unsigned NOT NULL, `queue_id` int(11) unsigned NOT NULL, `reason` varchar(255) NOT NULL, `error_date` datetime NOT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `job_id` (`job_id`), KEY `bot_id` (`bot_id`), KEY `queue_id` (`queue_id`))
CREATE TABLE IF NOT EXISTS `oauth_token` ( `id` int(11) NOT NULL AUTO_INCREMENT, `type` enum('request', 'verified', 'access'), `name` text NOT NULL, `consumer_id` int(11) NOT NULL, `user_id` int(11) unsigned, `ip_address` varchar(255) NOT NULL, `token` varchar(255) NOT NULL, `token_secret` varchar(255) NOT NULL, `callback_url` text NOT NULL, `verifier` varchar(255) NOT NULL, `device_data` text NOT NULL DEFAULT '', `last_seen` datetime NOT NULL, PRIMARY KEY (`id`), KEY `consumer_id` (`consumer_id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `type` (`type`), KEY `token` (`token`), KEY `ip_address` (`ip_address`))
CREATE TABLE IF NOT EXISTS `engine_os` ( `engine_id` int(11) unsigned NOT NULL, `os` enum('osx','linux','win','raspberrypi'), PRIMARY KEY (`engine_id`, `os`))
UPDATE slice_configs set user_id=NULL  where user_id=0
CREATE TABLE IF NOT EXISTS `s3_files` ( `id` bigint(11) unsigned NOT NULL AUTO_INCREMENT, `type` varchar(255) NOT NULL, `size` int(10) unsigned NOT NULL, `hash` char(32) NOT NULL, `bucket` varchar(255) NOT NULL, `path` varchar(255) NOT NULL, `add_date` datetime NOT NULL, `user_id` int(11) unsigned NOT NULL, `parent_id` int(11) NOT NULL, `source_url` text, PRIMARY KEY (`id`), KEY `parent_id` (`parent_id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
SELECT * FROM $this->tableName WHERE id = ?
UPDATE oauth_token SET type2=verified  WHERE type=1
SELECT id FROM slice_engines WHERE engine_path = ?
CREATE TABLE `slice_configs` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `fork_id` int(11) unsigned NOT NULL, `engine_id` int(11) unsigned NOT NULL, `user_id` int(11) unsigned NOT NULL, `config_name` varchar(255) NOT NULL, `config_data` text NOT NULL, `add_date` datetime NOT NULL, `edit_date` datetime NOT NULL, PRIMARY KEY (`id`), KEY `fork_id` (`fork_id`), KEY `user_id` (`user_id`), KEY `engine_id` (`engine_id`))
CREATE TABLE IF NOT EXISTS `oauth_consumer_nonce` ( `id` int(11) NOT NULL AUTO_INCREMENT, `consumer_id` int(11) unsigned default 0, `timestamp` int(11) unsigned default 0, `nonce` int(11) unsigned default 0, PRIMARY KEY (`id`), KEY `consumer_id` (`consumer_id`))
SELECT COUNT(id) FROM notifications WHERE id > ? AND (to_user_id = ? or to_user_id IS NULL)
CREATE TABLE IF NOT EXISTS `slice_configs` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `fork_id` int(11) unsigned NOT NULL, `engine_id` int(11) unsigned NOT NULL, `user_id` int(11) unsigned NOT NULL, `config_name` varchar(255) NOT NULL, `config_data` text NOT NULL, `add_date` datetime NOT NULL, `edit_date` datetime NOT NULL, PRIMARY KEY (`id`), KEY `fork_id` (`fork_id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `engine_id` (`engine_id`))
SELECT id from jobs where webcam_images!=''
SELECT id FROM jobs WHERE user_id = ? 
INSERT INTO bot_queues VALUES(?, ?, ?)
UPDATE oauth_token set user_id=NULL  where user_id=0
CREATE TABLE IF NOT EXISTS `queues` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `name` varchar(255) NOT NULL, `delay` int(11) unsigned NOT NULL DEFAULT 0, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE)
select 1 from dual where false
CREATE TABLE IF NOT EXISTS `tokens` ( `id` int(11) unsigned NOT NULL AUTO_INCREMENT, `user_id` int(11) unsigned NOT NULL, `hash` varchar(40) NOT NULL, `expire_date` datetime DEFAULT NULL, PRIMARY KEY (`id`), FOREIGN KEY (`user_id`) REFERENCES users(`id`) ON DELETE CASCADE, KEY `pass_hash` (`hash`), KEY `expire_date` (`expire_date`))
SELECT id FROM jobs WHERE queue_id = ? AND status = 'available' 
SELECT id FROM job_clock WHERE job_id = ? AND status = 'working' ORDER BY id DESC
SELECT id FROM s3_files ORDER BY id DESC
SELECT id, job_id FROM bots WHERE webcam_image_id != 0 AND last_seen > NOW() - 3600 ORDER BY last_seen DESC
