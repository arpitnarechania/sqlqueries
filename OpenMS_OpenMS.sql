SELECT COUNT(*) FROM SPECTRUM;
CREATE INDEX spec_mslevel_idx ON SPECTRUM(MSLEVEL);
CREATE INDEX spec_rt_idx ON SPECTRUM(RETENTION_TIME);
CREATE INDEX spec_run_idx ON SPECTRUM(RUN_ID);
SELECT ID, PRECURSOR_ID, RUN_ID FROM FEATURE) AS FEATURE ON FEATURE_ID = FEATURE.ID INNER JOIN (SELECT ID, DECOY FROM PRECURSOR) AS PRECURSOR ON FEATURE.PRECURSOR_ID = PRECURSOR.ID INNER JOIN PRECURSOR_PEPTIDE_MAPPING ON PRECURSOR.ID = PRECURSOR_PEPTIDE_MAPPING.PRECURSOR_ID INNER JOIN (SELECT ID, MODIFIED_SEQUENCE FROM PEPTIDE) AS PEPTIDE ON PRECURSOR_PEPTIDE_MAPPING.PEPTIDE_ID = PEPTIDE.ID;
CREATE INDEX chrom_run_idx ON CHROMATOGRAM(RUN_ID);
CREATE INDEX product_chr_idx ON DATA(CHROMATOGRAM_ID);
CREATE TABLE PRECURSOR(SPECTRUM_ID INT,CHROMATOGRAM_ID INT,CHARGE INT NULL,PEPTIDE_SEQUENCE TEXT NULL,DRIFT_TIME REAL NULL,ACTIVATION_METHOD INT NULL,ACTIVATION_ENERGY REAL NULL,ISOLATION_TARGET REAL NULL,ISOLATION_LOWER REAL NULL,ISOLATION_UPPER REAL NULL)
CREATE TABLE PEPTIDE_PROTEIN_MAPPING(PEPTIDE_ID INT NOT NULL,PROTEIN_ID INT NOT NULL)
SELECT ID, PRECURSOR_ID, RUN_ID FROM FEATURE) AS FEATURE ON FEATURE_ID = FEATURE.ID INNER JOIN (SELECT ID, DECOY FROM PRECURSOR) AS PRECURSOR ON FEATURE.PRECURSOR_ID = PRECURSOR.ID INNER JOIN PRECURSOR_PEPTIDE_MAPPING ON PRECURSOR.ID = PRECURSOR_PEPTIDE_MAPPING.PRECURSOR_ID INNER JOIN (SELECT ID, MODIFIED_SEQUENCE FROM PEPTIDE) AS PEPTIDE ON PRECURSOR_PEPTIDE_MAPPING.PEPTIDE_ID = PEPTIDE.ID;
CREATE TABLE PEPTIDE_PROTEIN_MAPPING(PEPTIDE_ID INT NOT NULL,PROTEIN_ID INT NOT NULL)
CREATE INDEX data_sp_idx ON DATA(SPECTRUM_ID);
UPDATE PEPTIDE SET DECOY = 1  WHERE ID IN (SELECT PEPTIDE.ID FROM PRECURSOR JOIN PRECURSOR_PEPTIDE_MAPPING ON PRECURSOR.ID = PRECURSOR_PEPTIDE_MAPPING.PRECURSOR_ID JOIN PEPTIDE ON PRECURSOR_PEPTIDE_MAPPING.PEPTIDE_ID = PEPTIDE.ID WHERE PRECURSOR.DECOY = 1)
SELECT RUN_ID, ID, PRECURSOR_ID FROM FEATURE) AS FEATURE ON FEATURE_TRANSITION.FEATURE_ID = FEATURE.ID INNER JOIN PRECURSOR ON FEATURE.PRECURSOR_ID = PRECURSOR.ID INNER JOIN SCORE_MS2 ON FEATURE.ID = SCORE_MS2.FEATURE_ID INNER JOIN (SELECT ID, DECOY FROM TRANSITION) AS TRANSITION ON FEATURE_TRANSITION.TRANSITION_ID = TRANSITION.ID WHERE PEP <= " + OpenMS::String(ipf_max_peakgroup_pep) + " AND VAR_ISOTOPE_OVERLAP_SCORE <= " + OpenMS::String(ipf_max_transition_isotope_overlap) + " AND VAR_LOG_SN_SCORE > " + OpenMS::String(ipf_min_transition_sn) + " AND PRECURSOR.DECOY == 0 ORDER BY FEATURE_ID, PRECURSOR_ID, TRANSITION_ID;
CREATE INDEX product_sp_idx ON DATA(SPECTRUM_ID);
UPDATE COMPOUND SET DECOY = 1  WHERE ID IN (SELECT COMPOUND.ID FROM PRECURSOR JOIN PRECURSOR_COMPOUND_MAPPING ON PRECURSOR.ID = PRECURSOR_COMPOUND_MAPPING.PRECURSOR_ID JOIN COMPOUND ON PRECURSOR_COMPOUND_MAPPING.COMPOUND_ID = COMPOUND.ID WHERE PRECURSOR.DECOY = 1)
CREATE INDEX run_extra_idx ON RUN_EXTRA(RUN_ID);
CREATE INDEX data_chr_idx ON DATA(CHROMATOGRAM_ID);
SELECT COUNT(*) FROM CHROMATOGRAM;
CREATE INDEX precursor_sp_idx ON DATA(SPECTRUM_ID);
UPDATE PROTEIN SET DECOY = 1  WHERE ID IN (SELECT PROTEIN.ID FROM PEPTIDE JOIN PEPTIDE_PROTEIN_MAPPING ON PEPTIDE.ID = PEPTIDE_PROTEIN_MAPPING.PEPTIDE_ID JOIN PROTEIN ON PEPTIDE_PROTEIN_MAPPING.PROTEIN_ID = PROTEIN.ID WHERE PEPTIDE.DECOY = 1)
CREATE INDEX precursor_chr_idx ON DATA(CHROMATOGRAM_ID);
SELECT COUNT(*) FROM TRANSITION;
