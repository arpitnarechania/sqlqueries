SELECT id FROM #prefix#plugins WHERE folder_name = :folder_name
select post_id from #prefix#post_errors);";
SELECT id, last_page_fetched_replies, last_page_fetched_tweets, last_favorite_id FROM tu_instances_twitter)#rollback=1;
SELECT id FROM tu_plugins WHERE is_active = 0
SELECT email FROM #prefix#owners WHERE email=:email";
SELECT option_value FROM tu_options WHERE namespace = 'application_options' 
SELECT * FROM #prefix#follows ";
select id, api_key from " . $this->table_prefix . "owners where id = 
CREATE TABLE tu_sessions ( session_id VARCHAR(100) NOT NULL PRIMARY KEY COMMENT 'Unique $_SESSION ID.', data MEDIUMTEXT NOT NULL COMMENT 'Serialized $_SESSION data.', updated DATETIME NOT NULL COMMENT 'Last updated time.', INDEX(updated))
SELECT * FROM #prefix#links WHERE post_key in (".$post_row['id'].")
select * from tu_test2');
SELECT network_user_id, post_id, network, type, date, count FROM #prefix#count_history WHERE 
CREATE TABLE tu_sessions ( session_id varchar(100) NOT NULL COMMENT 'Unique $_SESSION ID.', data mediumtext NOT NULL COMMENT 'Serialized $_SESSION data.', updated datetime NOT NULL COMMENT 'Last updated time.', PRIMARY KEY (session_id), KEY updated (updated))
SELECT id, url FROM tu_links l WHERE l.url != l.expanded_url;
CREATE TABLE IF NOT EXISTS `tu_invites_1_1` ( invite_code varchar(10) DEFAULT NULL COMMENT 'Invitation code.', created_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time the invitation was created, used to calculate expiration time.')
SELECT created_time FROM #prefix#invites WHERE invite_code=:invite_code";
SELECT process_id FROM #prefix#stream_procs 
CREATE TABLE tu_links_short ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', link_id int(11) NOT NULL COMMENT 'Expanded link ID in links table.', short_url varchar(100) COLLATE utf8_bin NOT NULL COMMENT 'Shortened URL.', click_count int(11) NOT NULL COMMENT 'Total number of clicks as reported by shortening service.', first_seen timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time of short URL capture.', PRIMARY KEY (id), KEY link_id (link_id), KEY short_url (short_url))
UPDATE tu_links SET expanded_url= WHERE is_image=1 WHERE is_image=1
SELECT * FROM `tu_posts_2b8`);
CREATE TABLE tu_options ( option_id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Unique internal ID.', namespace varchar(50) NOT NULL COMMENT 'Option namespace, ie, application or specific plugin.', option_name varchar(50) NOT NULL COMMENT 'Name of option or setting.', option_value varchar(255) NOT NULL COMMENT 'Value of option.', last_updated datetime NOT NULL COMMENT 'Last time option was updated.', created datetime NOT NULL COMMENT 'When option was created.', PRIMARY KEY (option_id), KEY namespace_key (namespace), KEY name_key (option_name))
CREATE TABLE tu_hashtags_posts ( post_id varchar(80) NOT NULL COMMENT 'Post ID on a given network.', hashtag_id int(11) NOT NULL COMMENT 'Internal hashtag ID.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this post appeared on in lower-case, e.g. twitter or facebook.', UNIQUE KEY hashtag_post (hashtag_id,post_id), KEY post_id (network,post_id), KEY hashtag_id (hashtag_id))
CREATE TABLE `tu_instances_facebook` ( `id` int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', `profile_updated` DATETIME COMMENT 'Last time the facebook profile was updated.', PRIMARY KEY (`id`))
select * from " . $this->table_prefix . "completed_migrations
SELECT post_id FROM #prefix#hashtags_posts 
CREATE TABLE tu_invites (invite_code varchar(10) DEFAULT NULL,created_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP)
SELECT place_id FROM #prefix#posts WHERE author_user_id=:author_id AND network=:network_name ";
SELECT id FROM #prefix#owners WHERE is_admin = 1
SELECT * FROM tu_follower_count)#rollback=1;
SELECT date, instance_id, slug, value FROM #prefix#insight_baselines WHERE instance_id=:instance_id 
SELECT * FROM tu_insight_baselines WHERE slug = 'bestie_last_bestie_id' and date = '".date('Y-m-d')."'
SELECT namespace FROM tu_options WHERE namespace = 'plugin_options-2345'
CREATE TABLE tu_user_errors_b16 ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', user_id varchar(30) NOT NULL COMMENT 'User ID on a particular service.', error_code int(11) NOT NULL COMMENT 'Error code issues from the service.', error_text varchar(255) NOT NULL COMMENT 'Error text as supplied from the service.', error_issued_to_user_id bigint(11) NOT NULL COMMENT 'User ID service issued error to.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', PRIMARY KEY (id), KEY user_id (user_id))
CREATE TABLE IF NOT EXISTS tu_places ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', place_id varchar(100) COMMENT 'Place ID on a given network.', place_type varchar(100) COMMENT 'Type of place.', name varchar(100) COMMENT 'Short name of a place.', full_name varchar(255) COMMENT 'Full name of a place.', country_code varchar(2) COMMENT 'Country code where the place is located.', country varchar(100) COMMENT 'Country where the place is located.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this place appears on in lower-case, e.g. twitter or facebook.', longlat Point COMMENT 'Longitude/lattitude point.', bounding_box Polygon COMMENT 'Bounding box of place.', PRIMARY KEY (id), UNIQUE KEY place_id (place_id, network))
CREATE TABLE `tu_test3_b16` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value` int(11) NOT NULL, PRIMARY KEY (`id`))
SELECT folder_name FROM #prefix#plugins WHERE id = :plugin_id
select * from " . $this->table_prefix . "posts where author_user_id = $authorid and network = 'twitter'
SELECT owner_email FROM #prefix#cookies WHERE cookie = :cookie 
select * from " . $this->table_prefix . 'posts where post_id=1000' );
SELECT network_user_id, network, count, date, full_date FROM ";
CREATE TABLE tu_group_members ( group_id varchar(50) NOT NULL COMMENT 'Group/list ID on the source network.', network varchar(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', member_user_id varchar(30) NOT NULL COMMENT 'User ID of group member on a given network.', is_active tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT 'Whether or not the user is active in the group (1 if so, 0 if not.)', first_seen datetime NOT NULL COMMENT 'First time this user was seen in the group.', last_seen datetime NOT NULL COMMENT 'Last time this user was seen in the group.', KEY group_network (group_id,network), KEY member_network (member_user_id,network))
select * from #prefix#users where id > :id and user_name like :user_name order by user_id
SELECT id FROM #prefix#posts WHERE network=:network and author_username=:author_username 
CREATE TABLE IF NOT EXISTS tu_places_posts ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', longlat Point NOT NULL COMMENT 'Longitude/lattitude point.', post_id bigint(20) unsigned NOT NULL COMMENT 'Post ID on a given network.', place_id varchar(100) COMMENT 'Place ID on a given network.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this post appeared on in lower-case, e.g. twitter or facebook.', PRIMARY KEY (id), UNIQUE KEY post_id (network, post_id))
SELECT *, null FROM tu_posts)#rollback=3;
select post_id from #prefix#posts) ";
select * from " . $table_prefix . "plugins
CREATE TABLE `users` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(11) NOT NULL, `user_name` varchar(255) COLLATE utf8_bin NOT NULL, `full_name` varchar(255) COLLATE utf8_bin NOT NULL, `avatar` varchar(255) COLLATE utf8_bin NOT NULL, `location` varchar(255) COLLATE utf8_bin DEFAULT NULL, `description` text COLLATE utf8_bin, `url` varchar(255) COLLATE utf8_bin DEFAULT NULL, `is_protected` tinyint(1) NOT NULL, `follower_count` int(11) NOT NULL, `friend_count` int(11) NOT NULL DEFAULT '0', `tweet_count` int(11) NOT NULL, `last_updated` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, `found_in` varchar(100) COLLATE utf8_bin DEFAULT NULL, `last_post` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', `joined` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', `last_post_id` bigint(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`), UNIQUE KEY `user_id` (`user_id`))
CREATE TABLE `tu_test2` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value` int(11) NOT NULL, PRIMARY KEY (`id`))
SELECT * FROM tu_follows) #rollback=1;
select * from " . $this->table_prefix . "plugins
SELECT * FROM tu_options)#rollback=1;
select * from ' . $this->test_table . ' where id = 3');
select * from new_prefix_test1';
select id from " . $this->table_prefix . "plugins where folder_name = 'instagram'
CREATE TABLE `tu_test3` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value` int(11) NOT NULL, PRIMARY KEY (`id`))
SELECT in_reply_to_post_id FROM #prefix#posts p 
CREATE TABLE tu_favorites ( post_id varchar(80) NOT NULL COMMENT 'Post ID on a given network.', author_user_id varchar(30) NOT NULL COMMENT 'User ID of favorited post author on a given network.', fav_of_user_id varchar(30) NOT NULL COMMENT 'User ID who favorited post on a given network.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', fav_timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time post was favorited.', UNIQUE KEY post_faving_user (post_id,fav_of_user_id,network), KEY post_id (post_id,network), KEY author_user_id (author_user_id,network), KEY fav_of_user_id (fav_of_user_id,network))
CREATE TABLE IF NOT EXISTS tu_hashtags ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', hashtag varchar(255) NOT NULL COMMENT 'Hash tag, i.e., #thinkup.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this hashtag appeared on in lower-case, e.g. twitter or facebook.', count_cache int(11) NOT NULL DEFAULT 0 COMMENT 'A count of times this hashtag was captured.', PRIMARY KEY (id), UNIQUE KEY network_hashtag (network, hashtag))
SELECT SCHEMA_NAME FROM INFORMATION_SCHEMA.SCHEMATA WHERE SCHEMA_NAME = '".$db_name."';
SELECT * FROM tu_users)#rollback=1;
select * from " . $this->table_prefix . 'owner_instances where instance_id = 20';
select * from " . $this->table_prefix . 'options where option_id = ' . $builder1->columns['last_insert_id'];
SELECT * FROM #prefix#insights WHERE instance_id=:instance_id 
SELECT * FROM tu_posts WHERE pub_date >= '2013-01-01') #rollback=1;
SELECT * FROM #prefix#instances_hashtags 
CREATE TABLE tu_owner_instances ( id int(20) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', owner_id int(10) NOT NULL COMMENT 'Owner ID.', instance_id int(10) NOT NULL COMMENT 'Instance ID.', oauth_access_token varchar(255) DEFAULT NULL COMMENT 'OAuth access token (optional).', oauth_access_token_secret varchar(255) DEFAULT NULL COMMENT 'OAuth secret access token (optional).', auth_error varchar(255) DEFAULT NULL COMMENT 'Last authorization error, if there was one.', PRIMARY KEY (id), UNIQUE KEY owner_instance_id (owner_id,instance_id))
SELECT user_id FROM #prefix#follows ";
SELECT * FROM #prefix#mentions WHERE user_name = :user_name AND network = :network
SELECT api_key_private FROM #prefix#owners WHERE email = :email AND is_activated='1' LIMIT 1;
CREATE TABLE IF NOT EXISTS `tu_options_1_1` ( option_id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Unique internal ID.', namespace varchar(50) NOT NULL COMMENT 'Option namespace, ie, application or specific plugin.', option_name varchar(50) NOT NULL COMMENT 'Name of option or setting.', option_value varchar(255) NOT NULL COMMENT 'Value of option.', last_updated datetime NOT NULL COMMENT 'Last time option was updated.', created datetime NOT NULL COMMENT 'When option was created.', PRIMARY KEY (option_id), KEY namespace_key (namespace), KEY name_key (option_name))
select id, test_name, test_id from #prefix#test_table where test_id >= :test_id order by test_id
CREATE TABLE tu_photos ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', post_key int(11) NOT NULL COMMENT 'Internal ID of photo post.', filter varchar(255) COMMENT 'Native filter used on the photo.', standard_resolution_url varchar(255) COMMENT 'URL of standard resolution image file.', low_resolution_url varchar(255) COMMENT 'URL of low resolution image file.', thumbnail_url varchar(255) COMMENT 'URL of thumbnail image file.', PRIMARY KEY (id), UNIQUE KEY post_key (post_key))
SELECT 1 FROM #prefix#groups 
CREATE TABLE IF NOT EXISTS `tu_encoded_locations_1_1` ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', short_name varchar(255) NOT NULL COMMENT 'Short name of a location, such as NYC.', full_name varchar(255) NOT NULL COMMENT 'Full name of location, such as New York, NY, USA.', latlng varchar(50) NOT NULL COMMENT 'Latitude and longitude coordinates of a place, comma-delimited.', PRIMARY KEY (id), KEY short_name (short_name))
select * from " . $this->table_prefix . 'plugins where name = "' . $plugin->name . '
select * from " . $this->table_prefix . 'options where option_id = '. $insert_id2;
CREATE TABLE tu_mentions_posts ( post_id varchar(80) NOT NULL COMMENT 'Post ID on a given network.', author_user_id varchar(30) NOT NULL COMMENT 'Author user ID of the post which contains the mention on a given network.', mention_id int(11) NOT NULL COMMENT 'Internal mention ID.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network which the mentioning post and mention comes from.', UNIQUE KEY mention_post (mention_id,post_id), KEY post_id (network,post_id), KEY author_user_id (author_user_id), KEY mention_id (mention_id))
SELECT * FROM tu_plugins WHERE folder_name='embedthread'
SELECT * FROM #prefix#hashtags_posts WHERE hashtag_id = :hashtag_id 
CREATE TABLE IF NOT EXISTS links ( id int(11) NOT NULL AUTO_INCREMENT, url varchar(255) COLLATE utf8_bin NOT NULL, expanded_url varchar(255) COLLATE utf8_bin NOT NULL, title varchar(255) COLLATE utf8_bin NOT NULL, clicks int(11) NOT NULL DEFAULT '0', status_id bigint(11) NOT NULL, PRIMARY KEY (id), KEY status_id (status_id))
CREATE TABLE tu_instances_twitter_20b3 ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', last_page_fetched_replies int(11) NOT NULL DEFAULT '1' COMMENT 'Last page of replies fetched for this instance.', last_page_fetched_tweets int(11) NOT NULL DEFAULT '1' COMMENT 'Last page of tweets fetched for this instance.', last_favorite_id varchar(80) DEFAULT NULL COMMENT 'Last favorite post ID of the instance saved.', PRIMARY KEY (id))
CREATE TABLE tu_instances_twitter ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', last_favorite_id varchar(80) DEFAULT NULL COMMENT 'Last favorite post ID of the instance saved.', last_reply_id varchar(80) NOT NULL COMMENT 'Last reply post ID to the instance saved.', last_follower_id_cursor varchar(80) DEFAULT NULL COMMENT 'Last follower ID cursor of the page saved for the instance.', PRIMARY KEY (id))
CREATE TABLE IF NOT EXISTS tu_stream_data ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', data text NOT NULL COMMENT 'Raw stream data.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', PRIMARY KEY (id))
CREATE TABLE tu_instances_twitter ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', last_favorite_id varchar(80) DEFAULT NULL COMMENT 'Last favorite post ID of the instance saved.', last_reply_id varchar(80) NOT NULL COMMENT 'Last reply post ID to the instance saved.', PRIMARY KEY (id))
SELECT * FROM tu_posts)#rollback=8;
select pwd_salt from " . $this->table_prefix . "owners where email = 'me@example.com'
create table tu_dropme (`value` int(11) NOT NULL)
CREATE TABLE tu_links ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', url varchar(255) NOT NULL COMMENT 'Link URL as it appears inside the post, ie, shortened in tweets.', expanded_url varchar(255) NOT NULL DEFAULT '' COMMENT 'Link URL expanded from its shortened form.', title varchar(255) NOT NULL COMMENT 'Link title.', description varchar(255) NOT NULL COMMENT 'Link description.', image_src varchar(255) NOT NULL DEFAULT '' COMMENT 'URL of a thumbnail image associated with this link.', caption varchar(255) NOT NULL COMMENT 'Link or image caption.', post_key int(11) NOT NULL COMMENT 'Internal ID of the post in which this link appeared.', error varchar(255) NOT NULL DEFAULT '' COMMENT 'Details of any error expanding a link.', PRIMARY KEY (id), UNIQUE KEY url (url,post_key), KEY post_key (post_key))
select * from " . $this->table_prefix . "test3 where value = 5
SELECT * FROM ( 
UPDATE tu_links SET image_src=expanded_url  WHERE is_image=1
SELECT user_id FROM #prefix#follows AS f ";
SELECT * FROM #prefix#stream_procs 
CREATE TABLE IF NOT EXISTS tu_insight_baselines ( date date NOT NULL COMMENT 'Date of baseline statistic.', instance_id int(11) NOT NULL COMMENT 'Instance ID.', slug varchar(100) NOT NULL COMMENT 'Unique identifier for a type of statistic.', value int(11) NOT NULL COMMENT 'The numeric value of this stat/total/average.', UNIQUE KEY unique_base (date,instance_id,slug), KEY date (date,instance_id))
select * from " . $this->table_prefix . 'owner_instances' );
CREATE TABLE `tu_test2` (`value` int(11) NOT NULL)
SELECT * FROM tu_links) #rollback=5;
SELECT * FROM " . $this->table_prefix . "follows WHERE 
CREATE TABLE tu_users2 ( id int(11) NOT NULL AUTO_INCREMENT, user_id bigint(11) NOT NULL, user_name varchar(255) NOT NULL, full_name varchar(255) NOT NULL, avatar varchar(255) NOT NULL, location varchar(255) DEFAULT NULL, description text, url varchar(255) DEFAULT NULL, is_protected tinyint(1) NOT NULL, follower_count int(11) NOT NULL, friend_count int(11) NOT NULL DEFAULT '0', post_count int(11) NOT NULL, last_updated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, found_in varchar(100) DEFAULT NULL, last_post timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', joined timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', last_post_id bigint(11) NOT NULL DEFAULT '0', network varchar(10) NOT NULL DEFAULT 'twitter', PRIMARY KEY (id), KEY user_id (user_id,network))
CREATE TABLE tt_instance_channels (`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,`instance_id` INT NOT NULL ,`channel_id` INT NOT NULL)
SELECT id FROM #prefix#mentions 
CREATE TABLE tu_group_member_count ( network VARCHAR(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', member_user_id VARCHAR(30) NOT NULL COMMENT 'User ID on a particular service in a number of groups/lists.', date DATE NOT NULL COMMENT 'Date of group count.', count INT UNSIGNED NOT NULL COMMENT 'Total number of groups the user is in.', INDEX member_network (member_user_id, network))
SELECT * FROM tu_users GROUP BY CONCAT(user_id, network) #rollback=1;
CREATE TABLE tu_users_b13 ( id int(11) NOT NULL AUTO_INCREMENT, user_id bigint(11) NOT NULL, user_name varchar(255) NOT NULL, full_name varchar(255) NOT NULL, avatar varchar(255) NOT NULL, location varchar(255) DEFAULT NULL, description text, url varchar(255) DEFAULT NULL, is_protected tinyint(1) NOT NULL, follower_count int(11) NOT NULL, friend_count int(11) NOT NULL DEFAULT '0', post_count int(11) NOT NULL, last_updated timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, found_in varchar(100) DEFAULT NULL, last_post timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', joined timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', last_post_id bigint(20) unsigned NOT NULL, network varchar(20) NOT NULL DEFAULT 'twitter', favorites_count int(11) DEFAULT NULL, PRIMARY KEY (id), UNIQUE KEY user_id (user_id,network))
CREATE TABLE tt_follower_count (network_user_id BIGINT NOT NULL ,network VARCHAR( 20 ) NOT NULL ,date DATE NOT NULL ,count INT NOT NULL)
CREATE TABLE weird_random_table(id INT)
select * from tu_test2
SELECT post_id FROM #prefix#posts 
select * from " . $this->table_prefix . 'options where option_id = '. $insert_id1;
SELECT migration FROM #prefix#completed_migrations where migration = :migration
CREATE TABLE `tt_plugin_options` (`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,`plugin_id` INT NOT NULL ,`option_name` VARCHAR( 255 ) NOT NULL ,`option_value` VARCHAR( 255 ) NOT NULL ,INDEX ( `plugin_id` ))
SELECT * FROM #prefix#mentions WHERE user_id = :user_id AND network = :network
CREATE TABLE tu_post_errors_b16 ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', post_id bigint(20) unsigned NOT NULL COMMENT 'Post ID on the originating service.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', error_code int(11) NOT NULL COMMENT 'Error code issues from the service.', error_text varchar(255) NOT NULL COMMENT 'Error text as supplied from the service.', error_issued_to_user_id varchar(30) NOT NULL COMMENT 'User ID service issued error to.', PRIMARY KEY (id), KEY post_id (post_id,network))
SELECT count(id) FROM #prefix#posts ";
select * from ' . $this->table_prefix . 'test2';
CREATE TABLE tu_instances_twitter ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', last_page_fetched_replies int(11) NOT NULL DEFAULT '1' COMMENT 'Last page of replies fetched for this instance.', last_page_fetched_tweets int(11) NOT NULL DEFAULT '1' COMMENT 'Last page of tweets fetched for this instance.', last_favorite_id bigint(20) unsigned DEFAULT NULL COMMENT 'Last favorite post ID of the instance saved.', last_unfav_page_checked int(11) DEFAULT '0' COMMENT 'Last page of older favorites checked for backfilling.', last_page_fetched_favorites int(11) DEFAULT NULL COMMENT 'Last page of favorites fetched.', PRIMARY KEY (id))
SELECT user_id FROM #prefix#users WHERE network=:network) ";
SELECT * FROM #prefix#encoded_locations
select * from " . $this->table_prefix . 'plugins where id = ' . $test_plugin_records['last_insert_id'];
CREATE TABLE tu_encoded_locations ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', short_name varchar(255) NOT NULL COMMENT 'Short name of a location, such as NYC.', full_name varchar(255) NOT NULL COMMENT 'Full name of location, such as New York, NY, USA.', latlng varchar(50) NOT NULL COMMENT 'Latitude and longitude coordinates of a place, comma-delimited.', PRIMARY KEY (id), KEY short_name (short_name))
SELECT activation_code FROM #prefix#owners WHERE email=:email";
CREATE TABLE tu_photos ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', post_key int(11) NOT NULL COMMENT 'Internal ID of photo post.', filter varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'Native filter used on the photo.', standard_resolution_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of standard resolution image file.', low_resolution_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of low resolution image file.', thumbnail_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of thumbnail image file.', PRIMARY KEY (id), UNIQUE KEY post_key (post_key))
CREATE TABLE tu_user_versions ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', user_key int(11) NOT NULL COMMENT 'Internal ID of the user this version applies to.', field_name varchar(100) NOT NULL COMMENT 'Field name from the users table.', field_value text COMMENT 'Field value from the users table.', crawl_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'When this version was captured.', PRIMARY KEY (id), KEY user_key (user_key,crawl_time))
CREATE TABLE tu_encoded_locations ( id int(11) NOT NULL AUTO_INCREMENT, short_name varchar(255) NOT NULL, full_name varchar(255) NOT NULL, latlng varchar(50) NOT NULL, PRIMARY KEY (id))
CREATE TABLE tu_plugins ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', name varchar(255) NOT NULL COMMENT 'Plugin display name, such as Hello ThinkUp.', folder_name varchar(255) NOT NULL COMMENT 'Name of folder where plugin lives.', description varchar(255) DEFAULT NULL COMMENT 'Plugin description.', author varchar(255) DEFAULT NULL COMMENT 'Plugin author.', homepage varchar(255) DEFAULT NULL COMMENT 'Plugin homepage URL.', version varchar(255) DEFAULT NULL COMMENT 'Plugin version.', is_active tinyint(4) NOT NULL DEFAULT '1' COMMENT 'Whether or not the plugin is activated (1 if so, 0 if not.)', PRIMARY KEY (id))
CREATE TABLE tu_owner_instances_1_0_8 ( id int(20) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', owner_id int(10) NOT NULL COMMENT 'Owner ID.', instance_id int(10) NOT NULL COMMENT 'Instance ID.', oauth_access_token varchar(255) DEFAULT NULL COMMENT 'OAuth access token (optional).', oauth_access_token_secret varchar(255) DEFAULT NULL COMMENT 'OAuth secret access token (optional).', auth_error varchar(255) DEFAULT NULL COMMENT 'Last authorization error, if there was one.', PRIMARY KEY (id), UNIQUE KEY owner_instance_id (owner_id, instance_id))
SELECT * FROM tu_follows)#rollback=5;
CREATE TABLE IF NOT EXISTS tu_insights ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', instance_id int(11) NOT NULL COMMENT 'Instance ID.', slug varchar(100) NOT NULL COMMENT 'Identifier for a type of statistic.', `text` varchar(255) NOT NULL COMMENT 'Text content of the alert.', related_data text COMMENT 'Serialized related insight data, such as a list of users or a post.', `date` date NOT NULL COMMENT 'Date of insight.', emphasis int(11) NOT NULL DEFAULT '0' COMMENT 'Level of emphasis for insight presentation.', PRIMARY KEY (id), KEY instance_id (instance_id,slug,date))
SELECT * FROM tu_sessions
select * from " . $this->table_prefix . 'options';
CREATE TABLE tu_follows_b10 ( user_id bigint(11) NOT NULL, follower_id bigint(11) NOT NULL, last_seen timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, active int(11) NOT NULL DEFAULT '1', network varchar(20) NOT NULL DEFAULT 'twitter', debug_api_call varchar(255) NOT NULL, UNIQUE KEY user_id (network,follower_id,user_id), KEY active (network, active, last_seen), KEY network (network,last_seen))
select * from " . $this->table_prefix . self::TEST_TABLE;
SELECT * FROM #prefix#hashtags WHERE hashtag = :hashtag AND network = :network
select id from " . $this->table_prefix . "plugins where folder_name = 'expandurls'
SELECT * FROM #prefix#hashtags_posts WHERE post_id = :post_id AND network = :network ORDER BY hashtag_id
CREATE TABLE tu_insight_baselines ( date date NOT NULL COMMENT 'Date of baseline statistic.', instance_id int(11) NOT NULL COMMENT 'Instance ID.', slug varchar(100) NOT NULL COMMENT 'Unique identifier for a type of statistic.', value int(11) NOT NULL COMMENT 'The numeric value of this stat/total/average.', UNIQUE KEY unique_base (date,instance_id,slug), KEY date (date,instance_id))
SELECT follower_id FROM #prefix#follows AS f 
CREATE TABLE IF NOT EXISTS `tu_plugins_1_1` ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', name varchar(255) NOT NULL COMMENT 'Plugin display name, such as Hello ThinkUp.', folder_name varchar(255) NOT NULL COMMENT 'Name of folder where plugin lives.', description varchar(255) DEFAULT NULL COMMENT 'Plugin description.', author varchar(255) DEFAULT NULL COMMENT 'Plugin author.', homepage varchar(255) DEFAULT NULL COMMENT 'Plugin homepage URL.', version varchar(255) DEFAULT NULL COMMENT 'Plugin version.', is_active tinyint(4) NOT NULL COMMENT 'Whether or not the plugin is activated (1 if so, 0 if not.)', PRIMARY KEY (id))
SELECT * FROM tu_user_errors)#rollback=2;
SELECT *, CURRENT_TIMESTAMP FROM tu_favorites)#rollback=1;
CREATE TABLE tu_count_history ( network_user_id varchar(30) DEFAULT NULL COMMENT 'User ID on a given network associated with this count.', post_id varchar(80) DEFAULT NULL COMMENT 'Post ID on a given network associated with this count.', network varchar(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', type varchar(80) NOT NULL COMMENT 'Type of item counted.', date date NOT NULL COMMENT 'Date this count was recorded.', count int(11) NOT NULL COMMENT 'Total number of the item specified in type.', KEY network_user_id (network,type,network_user_id), KEY post_id (network,type,post_id), KEY date (date))
SELECT *, 0 FROM tu_posts) #rollback=2;
select test_name from #prefix#test_table where test_id = :test_id
CREATE TABLE tu_cookies ( cookie varchar(100) NOT NULL COMMENT 'Unique cookie key.', owner_email varchar(200) NOT NULL COMMENT 'Email of owner logged in with this cookie.', UNIQUE KEY cookie (cookie), KEY owner_email (owner_email))
CREATE TABLE `follows` ( `user_id` int(11) NOT NULL, `follower_id` int(11) NOT NULL, `last_seen` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, `active` int(11) NOT NULL DEFAULT '1', PRIMARY KEY (`user_id`,`follower_id`), KEY `active` (`active`))
SELECT id FROM tu_plugins WHERE folder_name = 'flickrthumbnails'; 
SELECT place_id FROM #prefix#posts WHERE author_user_id=:author AND network=:network) ";
SELECT * FROM tu_invites)#rollback=1;
SELECT * FROM " . $this->table_prefix . 'links_short';
CREATE TABLE tu_instances_facebook ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', profile_updated datetime DEFAULT NULL COMMENT 'Last time the facebook profile was updated.', PRIMARY KEY (id))
CREATE TABLE IF NOT EXISTS tu_mentions_posts ( post_id bigint(20) unsigned NOT NULL COMMENT 'Post ID on a given network.', author_user_id bigint(11) NOT NULL COMMENT 'Author user ID of the post which contains the mention on a given network.', mention_id int(11) NOT NULL COMMENT 'Internal mention ID.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network which the mentioning post and mention comes from.', KEY post_id (network,post_id), KEY author_user_id (author_user_id), KEY mention_id (mention_id), UNIQUE KEY mention_post (mention_id, post_id) )
CREATE TABLE `tt_plugins` (`id` INT NOT NULL AUTO_INCREMENT,`name` VARCHAR( 255 ) NOT NULL ,`folder_name` VARCHAR( 255 ) NOT NULL ,`description` VARCHAR( 255 ),`author` VARCHAR( 255 ),`homepage` VARCHAR( 255 ),`version` VARCHAR( 255 ),`is_active` TINYINT NOT NULL ,PRIMARY KEY ( `id` ))
CREATE TABLE tu_test_table(' . 'id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,' . 'test_name varchar(20),' . 'test_id int(11),' . 'unique key test_id_idx (test_id)' . ')
select * from ' . $this->table_prefix . 'test1';
SELECT user_key, field_name, field_value, crawl_time FROM #prefix#user_versions uv 
CREATE TABLE tu_mentions ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', user_id varchar(30) NOT NULL COMMENT 'The user ID inside the respective service, e.g. Twitter or Facebook user IDs.', user_name varchar(255) NOT NULL COMMENT 'The user''s name inside the respective service, e.g. Twitter or Facebook user name.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network that this post belongs to in lower-case, e.g. twitter or facebook.', count_cache int(11) NOT NULL DEFAULT '0' COMMENT 'A count of mentions a given user on a network has in the datastore.', PRIMARY KEY (id), UNIQUE KEY user_id (network,user_id))
SELECT invite_code FROM #prefix#invites WHERE invite_code=:invite_code
CREATE TABLE `tweets` ( `id` int(11) NOT NULL AUTO_INCREMENT, `status_id` bigint(11) NOT NULL, `author_user_id` int(11) NOT NULL, `author_username` varchar(50) COLLATE utf8_bin NOT NULL, `author_fullname` varchar(50) COLLATE utf8_bin NOT NULL, `author_avatar` varchar(255) COLLATE utf8_bin NOT NULL, `tweet_text` varchar(160) COLLATE utf8_bin NOT NULL, `tweet_html` varchar(255) COLLATE utf8_bin NOT NULL, `source` varchar(255) COLLATE utf8_bin DEFAULT NULL, `pub_date` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00', `in_reply_to_user_id` int(11) DEFAULT NULL, `in_reply_to_status_id` bigint(11) DEFAULT NULL, `reply_count_cache` int(11) NOT NULL DEFAULT '0', PRIMARY KEY (`id`), UNIQUE KEY `status_id` (`status_id`), KEY `author_username` (`author_username`), KEY `pub_date` (`pub_date`), KEY `author_user_id` (`author_user_id`))
SELECT * FROM #prefix#links WHERE post_key in (".implode(',', $post_keys_array).")
SELECT * FROM tu_count_history) #rollback=6;
select id,full_name, is_activated from tu_owners;
CREATE TABLE tu_hashtags ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', hashtag varchar(255) NOT NULL COMMENT 'Hash tag, i.e., #thinkup.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this hashtag appeared on in lower-case, e.g. twitter or facebook.', count_cache int(11) NOT NULL DEFAULT '0' COMMENT 'A count of times this hashtag was captured.', PRIMARY KEY (id), UNIQUE KEY network_hashtag (network,hashtag))
select * from " . $this->table_prefix . 'options where namespace = \'plugin_options-6\'';
CREATE TABLE IF NOT EXISTS tu_hashtags_posts ( post_id bigint(20) unsigned NOT NULL COMMENT 'Post ID on a given network.', hashtag_id int(11) NOT NULL COMMENT 'Internal hashtag ID.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this post appeared on in lower-case, e.g. twitter or facebook.', KEY post_id (network, post_id), KEY hashtag_id (hashtag_id), UNIQUE KEY hashtag_post (hashtag_id,post_id))
CREATE TABLE `tweet_errors` ( `id` int(11) NOT NULL AUTO_INCREMENT, `status_id` bigint(20) NOT NULL, `error_code` int(11) NOT NULL, `error_text` varchar(255) NOT NULL, `error_issued_to_user_id` int(11) NOT NULL, PRIMARY KEY (`id`), UNIQUE KEY `status_id` (`status_id`))
SELECT *, 0 FROM tu_posts) #rollback=1;
CREATE TABLE `tu_completed_migrations` ( `migration` varchar(255) NOT NULL COMMENT 'Completed migration - filename-index', `date_ran` timestamp DEFAULT CURRENT_TIMESTAMP COMMENT 'The time the migration ran', `sql_ran` text COMMENT 'The migration sql that was executed', PRIMARY KEY (`migration`))
CREATE TABLE tu_invites ( invite_code varchar(10) DEFAULT NULL COMMENT 'Invitation code.', created_time timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time the invitation was created, used to calculate expiration time.')
SELECT * FROM tu_encoded_locations)#rollback=1;
SELECT *, null FROM tu_owner_instances)#rollback=2;
CREATE TABLE tu_groups ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', group_id VARCHAR(50) NOT NULL COMMENT 'Group/list ID on the source network.', network VARCHAR(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', group_name VARCHAR(50) NOT NULL COMMENT 'Name of the group or list on the source network.', is_active TINYINT(1) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Whether or not the group is active (1 if so, 0 if not.)', first_seen DATETIME NOT NULL COMMENT 'First time this group was seen on the originating network.', last_seen DATETIME NOT NULL COMMENT 'Last time this group was seen on the originating network.', PRIMARY KEY (id), INDEX group_network (group_id, network))
SELECT * FROM #prefix#mentions_posts WHERE mention_id = :mention_id ORDER BY post_id
CREATE TABLE tu_favorites_b14 ( post_id bigint(20) unsigned NOT NULL COMMENT 'Post ID on a given network.', author_user_id bigint(11) NOT NULL COMMENT 'User ID of favorited post author on a given network.', fav_of_user_id bigint(11) NOT NULL COMMENT 'User ID who favorited post on a given network.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', fav_timestamp timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time post was favorited.', UNIQUE KEY post_faving_user (post_id,fav_of_user_id,network), KEY post_id (post_id, network), KEY author_user_id (author_user_id, network), KEY fav_of_user_id (fav_of_user_id, network))
CREATE TABLE tu_instances_instagram ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'nternal unique ID.', followed_by_next_cursor varchar(255) DEFAULT NULL COMMENT 'Follower fetch cursor.', follows_next_cursor varchar(255) DEFAULT NULL COMMENT 'Friend fetch cursor.', next_max_like_id varchar(255) DEFAULT NULL COMMENT 'Likes fetch cursor.', PRIMARY KEY (id))
SELECT * FROM #prefix#owners WHERE password_token LIKE :token
SELECT * from #prefix#stream_procs 
CREATE TABLE tu_follows_b15 ( user_id bigint(11) NOT NULL COMMENT 'User ID on a particular service who has been followed.', follower_id bigint(11) NOT NULL COMMENT 'User ID on a particular service who has followed user_id.', last_seen timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT 'Last time this relationship was seen on the originating network.', first_seen timestamp NOT NULL COMMENT 'First time this relationship was seen on the originating network.', active int(11) NOT NULL DEFAULT '1' COMMENT 'Whether or not the relationship is active (1 if so, 0 if not.)', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', debug_api_call varchar(255) NOT NULL COMMENT 'Developer-only field for storing the API URL source of this data point.', UNIQUE KEY user_id (network,follower_id,user_id), KEY active (network,active,last_seen), KEY network (network,last_seen))
SELECT id FROM #prefix#users u LEFT JOIN #prefix#follows f ON ";
SELECT user_id FROM #prefix#user_errors WHERE network=:network) ";
CREATE TABLE tu_stream_procs ( process_id int(11) NOT NULL COMMENT 'Stream process ID.', email varchar(100) NOT NULL COMMENT 'Email address of the user running the stream process.', instance_id int(11) NOT NULL COMMENT 'Internal instance ID receiving stream data.', last_report timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Process heartbeat''s last beat time.', PRIMARY KEY (process_id), UNIQUE KEY owner_instance (email,instance_id))
select name, id from people'</strong>));
SELECT * FROM tu_users)#rollback=3;
SELECT * FROM tu_user_errors)#rollback=1;
SELECT * FROM #prefix#posts AS p WHERE ";
CREATE TABLE tu_follower_count_b16 ( network_user_id varchar(30) NOT NULL COMMENT 'User ID on a particular service with a follower count.', network varchar(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', date date NOT NULL COMMENT 'Date of follower count.', count int(11) NOT NULL COMMENT 'Total number of followers.')
SELECT * FROM #prefix#mentions_posts WHERE post_id = :post_id AND network = :network ORDER BY mention_id
SELECT user_id FROM #prefix#follows AS f 
CREATE TABLE tu_user_versions ( id INT( 11 ) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'Internal unique ID.', user_key INT ( 11 ) NOT NULL COMMENT 'Internal ID of the user this version applies to.', field_name varchar(100) NOT NULL COMMENT 'Field name from the users table.', field_value text comment 'Field value from the users table.', crawl_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP COMMENT 'When this version was captured.', index (user_key, crawl_time))
CREATE TABLE IF NOT EXISTS `tu_favorites` ( `post_id` bigint(20) UNSIGNED NOT NULL, `author_user_id` bigint(11) NOT NULL, `fav_of_user_id` bigint(11) NOT NULL, `network` varchar(20) NOT NULL DEFAULT 'twitter', KEY `post_id` (`post_id`), KEY `author_user_id` (`author_user_id`), KEY `fav_of_user_id` (`fav_of_user_id`), UNIQUE KEY `post_id_2` (`post_id`,`fav_of_user_id`,`network`) )
select * from " . $this->table_prefix . "completed_migrations
SELECT user_id, follower_id, last_seen, last_seen, active, network, debug_api_call FROM tu_follows)#rollback=1;
SELECT data FROM #prefix#sessions WHERE session_id=:session_id
SELECT user_key, field_name, field_value, crawl_time FROM #prefix#user_versions as uv 
CREATE TABLE IF NOT EXISTS tu_stream_procs ( process_id int(11) NOT NULL COMMENT 'Stream process ID.', email varchar(100) NOT NULL COMMENT 'Email address of the user running the stream process.', instance_id int(11) NOT NULL COMMENT 'Internal instance ID receiving stream data.', last_report timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Process heartbeat''s last beat time.', PRIMARY KEY (process_id), UNIQUE KEY owner_instance (email,instance_id))
CREATE TABLE `owners` ( `id` int(20) NOT NULL AUTO_INCREMENT, `full_name` varchar(200) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `user_name` varchar(200) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `user_pwd` varchar(200) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `user_email` varchar(200) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `activation_code` int(10) NOT NULL DEFAULT '0', `joined` date NOT NULL DEFAULT '0000-00-00', `country` varchar(100) CHARACTER SET latin1 COLLATE latin1_general_ci NOT NULL DEFAULT '', `user_activated` int(1) NOT NULL DEFAULT '0', `is_admin` int(1) NOT NULL DEFAULT '0', PRIMARY KEY (`id`))
select * from " . $this->table_prefix . 'posts where id = 1';
SELECT post_id FROM #prefix#favorites WHERE fav_of_user_id = :user_id AND network = :network;
select id, test_name, test_id from #prefix#test_table where test_id = :test_id
CREATE TABLE tu_group_members ( group_id VARCHAR(50) NOT NULL COMMENT 'Group/list ID on the source network.', network VARCHAR(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', member_user_id VARCHAR(30) NOT NULL COMMENT 'User ID of group member on a given network.', is_active TINYINT(1) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Whether or not the user is active in the group (1 if so, 0 if not.)', first_seen DATETIME NOT NULL COMMENT 'First time this user was seen in the group.', last_seen DATETIME NOT NULL COMMENT 'Last time this user was seen in the group.', INDEX group_network (group_id, network), INDEX member_network (member_user_id, network))
CREATE TABLE tu_groups ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', group_id varchar(50) NOT NULL COMMENT 'Group/list ID on the source network.', network varchar(20) NOT NULL COMMENT 'Originating network in lower case, i.e., twitter or facebook.', group_name varchar(50) NOT NULL COMMENT 'Name of the group or list on the source network.', is_active tinyint(1) unsigned NOT NULL DEFAULT '1' COMMENT 'Whether or not the group is active (1 if so, 0 if not.)', first_seen datetime NOT NULL COMMENT 'First time this group was seen on the originating network.', last_seen datetime NOT NULL COMMENT 'Last time this group was seen on the originating network.', PRIMARY KEY (id), KEY group_network (group_id,network))
SELECT * FROM #prefix#links WHERE post_key in (".implode(",", $post_keys_array).")
SELECT * FROM tu_options WHERE option_name='favs_older_pages' OR 
select * from ' . $this->test_table . ' where id = 4');
SELECT id, data FROM #prefix#stream_data 
CREATE TABLE tu_post_errors ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', post_id varchar(80) NOT NULL COMMENT 'Post ID on the originating service.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', error_code int(11) NOT NULL COMMENT 'Error code issues from the service.', error_text varchar(255) NOT NULL COMMENT 'Error text as supplied from the service.', error_issued_to_user_id varchar(30) NOT NULL COMMENT 'User ID service issued error to.', PRIMARY KEY (id), KEY post_id (post_id,network))
CREATE TABLE IF NOT EXISTS tu_instances_hashtags ( id INT(20) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', instance_id INT(11) NOT NULL COMMENT 'Instance ID.', hashtag_id INT(11) NOT NULL COMMENT 'Hashtag ID.', last_post_id VARCHAR(80) NOT NULL DEFAULT 0 COMMENT 'Last network post ID fetched for this hashtag search.', earliest_post_id VARCHAR(80) NOT NULL DEFAULT 0 COMMENT 'Earliest network post ID fetched for this hashtag search.', PRIMARY KEY (id), UNIQUE KEY instance_id (instance_id,hashtag_id))
SELECT count FROM ' . $this->table_prefix . 'count_history WHERE ';
SELECT follower_count FROM #prefix#users AS u 
SELECT * FROM tu_plugins)#rollback=1;
SELECT pwd FROM #prefix#owners WHERE email = :email AND is_activated='1' LIMIT 1;
SELECT * FROM tu_follows)#rollback=3;
select * from " . $this->table_prefix . "test3 where value = 8
CREATE TABLE tu_cookies ( cookie varchar(100) not null COMMENT 'Unique cookie key.', owner_email varchar(200) not null COMMENT 'Email of owner logged in with this cookie.', unique key (cookie), index (owner_email))
SELECT * FROM #prefix#plugins p";
CREATE TABLE ' . $config_array['table_prefix'] . 'test_table(' . 'id int(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,' . 'test_name varchar(20),' . 'test_id int(11),' . 'unique key test_id_idx (test_id)' . ')
CREATE TABLE `tu_test1` ( `id` int(11) NOT NULL AUTO_INCREMENT, `value` int(11) NOT NULL, PRIMARY KEY (`id`))
CREATE TABLE IF NOT EXISTS tu_mentions ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', user_id bigint(11) NOT NULL COMMENT 'The user ID inside the respective service, e.g. Twitter or Facebook user IDs.', user_name varchar(255) NOT NULL COMMENT 'The user''s name inside the respective service, e.g. Twitter or Facebook user name.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network that this post belongs to in lower-case, e.g. twitter or facebook.', count_cache int(11) NOT NULL DEFAULT 0 COMMENT 'A count of mentions a given user on a network has in the datastore.', PRIMARY KEY (id), UNIQUE KEY user_id (network, user_id))
SELECT is_active FROM #prefix#plugins p WHERE p.id = :id';
select count(*) from `$db`.`".$prefix.
select * from " . $this->table_prefix . "options where namespace = 'plugin_options-6'
CREATE TABLE tu_user_errors ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', user_id varchar(30) NOT NULL COMMENT 'User ID on a particular service.', error_code int(11) NOT NULL COMMENT 'Error code issues from the service.', error_text varchar(255) NOT NULL COMMENT 'Error text as supplied from the service.', error_issued_to_user_id varchar(30) NOT NULL COMMENT 'User ID service issued error to.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', PRIMARY KEY (id), KEY user_id (user_id))
SELECT pub_date FROM #prefix#posts 
SELECT id from #prefix#hashtags 
CREATE TABLE tu_links_short ( id INT( 11 ) NOT NULL AUTO_INCREMENT PRIMARY KEY COMMENT 'Internal unique ID.', link_id INT( 11 ) NOT NULL COMMENT 'Expanded link ID in links table.', short_url VARCHAR( 100 ) NOT NULL COMMENT 'Shortened URL.', click_count INT( 11 ) NOT NULL COMMENT 'Total number of clicks as reported by shortening service.', first_seen TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT 'Time of short URL capture.', INDEX ( link_id ), KEY `short_url` ( short_url ))
UPDATE tu_test3 set value = 5  where value = 3
SELECT id FROM #prefix#plugins where id = :id';
select id, test_name, test_id from #prefix#test_table order by test_id LIMIT :limit
SELECT date, instance_id, slug, value FROM #prefix#insight_baselines WHERE slug=:slug AND date=:date 
CREATE TABLE tu_instances_hashtags ( id int(20) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', instance_id int(11) NOT NULL COMMENT 'Instance ID.', hashtag_id int(11) NOT NULL COMMENT 'Hashtag ID.', last_post_id varchar(80) NOT NULL DEFAULT '0' COMMENT 'Last network post ID fetched for this hashtag search.', earliest_post_id varchar(80) NOT NULL DEFAULT '0' COMMENT 'Earliest network post ID fetched for this hashtag search.', PRIMARY KEY (id), UNIQUE KEY instance_id (instance_id,hashtag_id))
SELECT user_id FROM #prefix#user_errors ";
SELECT date, instance_id, slug, value FROM #prefix#insight_baselines WHERE 
CREATE TABLE tu_stream_data ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', data text NOT NULL COMMENT 'Raw stream data.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'Originating network in lower case, i.e., twitter or facebook.', PRIMARY KEY (id))
SELECT id, url, expanded_url, title, null, null, null, clicks, post_id, network, is_image, error FROM tu_links)#rollback=1;
SELECT geo FROM #prefix#posts WHERE author_user_id=:author_id AND network=:network_name 
CREATE TABLE `user_errors` ( `id` int(11) NOT NULL AUTO_INCREMENT, `user_id` int(20) NOT NULL, `error_code` int(11) NOT NULL, `error_text` varchar(255) NOT NULL, `error_issued_to_user_id` int(11) NOT NULL, PRIMARY KEY (`id`), KEY `user_id` (`user_id`))
CREATE TABLE tt_channels (`id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY ,`keyword` VARCHAR( 255 ) NOT NULL ,`network` VARCHAR( 10 ) NOT NULL)
CREATE TABLE `owner_instances` ( `id` int(20) NOT NULL AUTO_INCREMENT, `owner_id` int(10) NOT NULL, `instance_id` int(10) NOT NULL, `oauth_access_token` varchar(255) NOT NULL DEFAULT '', `oauth_access_token_secret` varchar(255) DEFAULT NULL, PRIMARY KEY (`id`))
CREATE TABLE tu_places_posts ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', longlat point NOT NULL COMMENT 'Longitude/lattitude point.', post_id varchar(80) NOT NULL COMMENT 'Post ID on a given network.', place_id varchar(100) DEFAULT NULL COMMENT 'Place ID on a given network.', network varchar(20) NOT NULL DEFAULT 'twitter' COMMENT 'The network this post appeared on in lower-case, e.g. twitter or facebook.', PRIMARY KEY (id), UNIQUE KEY post_id (network,post_id))
UPDATE tt_posts SET is_geo_encoded = 6  WHERE place IS NULL AND location IS NULL AND geo IS NULL
SELECT * FROM tu_users WHERE 1 GROUP BY user_id);
SELECT * FROM tu_insight_baselines WHERE slug = 'bestie_last_bestie_count' and date = '
SELECT id, user_id, user_name, full_name, avatar, location, description, url, null, null, is_verified, is_protected, follower_count, friend_count, post_count, last_updated, found_in, last_post, joined, last_post_id, network, favorites_count FROM tu_users)#rollback=4;
CREATE TABLE tu_options ( option_id int(11) auto_increment NOT NULL, namespace varchar(50) NOT NULL, option_name varchar(50) NOT NULL, option_value varchar(255) NOT NULL, last_updated datetime NOT NULL, created datetime NOT NULL, PRIMARY KEY (option_id), KEY namespace_key (namespace), KEY name_key (option_name))
CREATE TABLE tu_photos ( id int(11) NOT NULL AUTO_INCREMENT COMMENT 'Internal unique ID.', post_key int(11) NOT NULL COMMENT 'Internal ID of photo post.', filter varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'Native filter used on the photo.', standard_resolution_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of standard resolution image file.', low_resolution_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of low resolution image file.', thumbnail_url varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT 'URL of thumbnail image file.', is_short_video int(1) NOT NULL DEFAULT '0' COMMENT 'Whether or not this is a short video (1 if so, 0 if not).', PRIMARY KEY (id), UNIQUE KEY post_key (post_key), KEY is_short_video (is_short_video))
